#!/bin/bash

try() {
    N=$1
    shift
    
    for ((I=1; I<=$N; I++)) do
        set +e
        "$@"
        EC=$?
        set -e
        if [ "$EC" == "0" ]; then
            return 0
        fi
        echo -n $I...
    done
    return 1
}

set -e

PACKAGE_NAME="psij-testing-service"
URL_BASE=https://github.com/ExaWorks/$PACKAGE_NAME/archive/refs/tags/v
FORCE=0
DONTASK=0

while [ "$1" != "" ]; do
    case "$1" in
        --force)
            FORCE=1
            shift
            ;;
        -y)
            DONTASK=1
            shift
            ;;
        -*)
            echo "Unrecognized option $1"
            exit 1
            ;;
        *)
            TYPE="$1"
            TARGET_VERSION="$2"
            shift
            shift
            ;;
    esac
done

if [ "$TARGET_VERSION" == "" ] || [ "$TYPE" == "" ]; then
    echo "Usage: update-psi-j-testing-service [--force] <type> <target_version>"
    exit 1
fi

PACKAGE="$URL_BASE$TARGET_VERSION.tar.gz"
if [ "${TARGET_VERSION::1}" == "/" ]; then
    # install from source
    echo "Installing from source in $TARGET_VERSION"
    PACKAGE="$TARGET_VERSION"
elif ! wget -q --method=HEAD "$URL_BASE$TARGET_VERSION.tar.gz"; then
    echo "Error: no such version. Please check that the repo has a 'v$TARGET_VERSION' tag"
    exit 2
fi

CURRENT_VERSION=`pip show $PACKAGE_NAME|grep Version|awk '{print $2}'`

LOWER_VERSION=`echo -e "$CURRENT_VERSION\n$TARGET_VERSION"| sort -V | head -n 1`

if [ "$FORCE" == "0" ]; then
    if [ "$TARGET_VERSION" == "$LOWER_VERSION" ]; then
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Error: target version ($TARGET_VERSION) is lower than the currently"
            echo "installed version ($CURRENT_VERSION). If you are sure you want to "
            echo "downgrade, use the --force flag."
            exit 3
        fi
    fi
fi

if [ "$DONTASK" == "0" ]; then
    echo "Upgrade from $CURRENT_VERSION to $TARGET_VERSION (y/n)?"

    read ANSWER
else
    ANSWER="y"
fi

if [ "$ANSWER" == "y" ]; then
    pip install "$PACKAGE"
    PACKAGE_LOC=`pip show $PACKAGE_NAME | grep "Location: " | sed 's/Location: //'`
    LINK_NAME="$PACKAGE_LOC/psij/web/instance/customization.js"
    if [ ! -a "$LINK_NAME" ]; then
        ln -s "customization-$TYPE.js" "$LINK_NAME"
    fi
    try 3 timeout 10s service psi-j-testing-service restart
else
    echo "OK. Bailing out..."
fi
